

// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\components\dashboard_card.tsx ===
"use client";

import React from "react";
type CardProps = {
  title: string;
  size: string;
  top: string;
  left: string;
  children: React.ReactNode;
};

const Card: React.FC<CardProps> = ({ title, size, top, left, children }) => {
  return (
    <div
      className={`${size} p-2 bg-white shadow-lg rounded-lg absolute`}
      style={{ top, left }}
    >
      <h3 className="text-lg font-semibold text-center m-1 border-b border-gray200">
        {title}
      </h3>
      <div>{children}</div>
    </div>
  );
};

export default Card;


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\components\dropdown.tsx ===
"use client";

import React, { useState } from "react";
import { ChevronDownIcon, ChevronUpIcon } from "@heroicons/react/20/solid";

interface DropdownProps {
  options: string[];
  label: string;
  value?: string;
  onChange: (value: string) => void;
  menuWidth?: string;
}

const Dropdown: React.FC<DropdownProps> = ({
  options = [],
  label,
  value = "",
  onChange,
  menuWidth = "w-full",
}) => {
  const [isOpen, setIsOpen] = useState(false);

  const toggleDropdown = () => setIsOpen(!isOpen);

  const handleOptionSelect = (option: string) => {
    onChange(option);
    setIsOpen(false);
  };

  return (
    <div className="relative w-full h-full">
      <div className="flex items-stretch w-full h-full bg-white text-gray-700 font-medium rounded-lg border border-gray-300 shadow-md overflow-hidden text-sm sm:text-base">
        {/* Label button - grows and truncates */}
        <button
          type="button"
          onClick={toggleDropdown}
          className="w-full px-3 py-1 sm:px-4 sm:py-2 text-left hover:bg-gray-100 transition-all duration-200 truncate"
        >
          {value || label}
        </button>

        {/* Chevron button - fixed width */}
        <button
          type="button"
          onClick={toggleDropdown}
          className=" w-10 flex items-center justify-center bg-gray-200 hover:bg-gray-300 transition-all border-l border-gray-300"
        >
          {isOpen ? (
            <ChevronUpIcon className="h-5 w-5 text-gray-600" />
          ) : (
            <ChevronDownIcon className="h-5 w-5 text-gray-600" />
          )}
        </button>
      </div>

      {/* Dropdown menu */}
      {isOpen && (
        <div
          className={`absolute mt-1 z-10 ${menuWidth} max-w-full bg-white border border-gray-300 rounded-lg shadow-lg`}
        >
          <ul className="py-1 max-h-60 overflow-auto text-sm sm:text-base">
            {options.map((option) => (
              <li
                key={option}
                onClick={() => handleOptionSelect(option)}
                className="px-4 py-2 text-gray-700 cursor-pointer hover:bg-gray-100 truncate"
              >
                {option}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default Dropdown;


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\components\elementRow.tsx ===
import { TrashIcon } from "@heroicons/react/24/solid";
import Dropdown from "@/app/components/dropdown";

type Element = {
  title: string;
  operator: string;
  value: number;
  unit?: string;
};

type ElementRowProps = {
  element: Element;
  index: number;
  weatherOptions: { weather: string; unit: string }[];
  operatorOptions: string[];
  updateElement: (
    i: number,
    key: "title" | "operator" | "value",
    newValue: string
  ) => void;
  handleDeleteElement: (indexToDelete: number) => void;
};

const ElementRow = ({
  element,
  index,
  weatherOptions,
  operatorOptions,
  updateElement,
  handleDeleteElement,
}: ElementRowProps) => {
  return (
    <div className="flex flex-row gap-4 items-center justify-items-center overflow-visible">
      {/* Weather dropdown */}

      <Dropdown
        label={element.title}
        options={weatherOptions.map((opt) => opt.weather)}
        onChange={(value: string) => updateElement(index, "title", value)}
        value={element.title}
      />

      {/* Operator, value, unit, delete */}

      <div className="w-[90px]">
        <Dropdown
          label="Operator"
          options={operatorOptions}
          value={element.operator}
          onChange={(value: string) => updateElement(index, "operator", value)}
        />
      </div>

      <input
        className="w-[90px] h-10 border border-gray-300 dark:border-gray-600 rounded px-2 py-1 dark:bg-gray-800"
        value={element.value}
        type="number"
        inputMode="decimal"
        onChange={(e) => updateElement(index, "value", e.target.value)}
      />
      <div className="flex items-center justify-between">
        <p className="w-[50px] text-center ">{element.unit || ""}</p>
      </div>

      <button
        type="button"
        className="p-2 text-red-500 hover:text-red-700 rounded-full hover:bg-red-100 dark:hover:bg-red-900/50"
        onClick={() => handleDeleteElement(index)}
      >
        <TrashIcon className="w-5 h-5" />
      </button>
    </div>
  );
};

export default ElementRow;


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\components\header.tsx ===
"use client";

import Link from "next/link";

const Header = ({ onSidebarToggle }: { onSidebarToggle: () => void }) => {
  return (
    <header className="fixed top-0 left-0 w-full bg-gray-800 z-5 text-white shadow-md overflow-x-hidden">
      <div className="flex items-center justify-between p-4">
        <button onClick={onSidebarToggle} className="text-white md:hidden">
          ☰
        </button>

        <Link
          href="/dashboard"
          className="text-lg font-semibold absolute left-1/2 transform -translate-x-1/2"
        >
          SkyDeck
        </Link>

        <Link href={"/profile"} className="ml-auto flex items-center space-x-4">
          <img
            src="https://picsum.photos/200/200?random=1"
            alt="Profile"
            className="w-10 h-10 rounded-full"
          />
          <span className="text-white hidden md:block">John Doe</span>{" "}
        </Link>
      </div>
    </header>
  );
};

export default Header;


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\components\sidebar.tsx ===
"use client";

import Link from "next/link";
import React from "react";

const links = [
  {
    name: "Dashboard",
    href: "/dashboard",
  },
  {
    name: "Decks",
    href: "/decks",
  },
];

const Sidebar = ({
  isOpen,
  onClose,
}: {
  isOpen: boolean;
  onClose: () => void;
}) => {
  return (
    <div
      className={`fixed left-0 top-[72px] h-[calc(100vh-4rem)] bg-gray-800 md:w-[100px] w-full transition-transform transform
    ${isOpen ? "translate-x-0" : "-translate-x-full"} md:translate-x-0 z-4`}
    >
      <div className="md:w-[132px] w-full bg-gray-900 text-white h-full p-4 flex justify-center md:block text-center md:text-left">
        <nav>
          <ul>
            {links.map((link, index) => (
              <li key={index}>
                <Link
                  href={link.href}
                  className="block py-2 px-2 hover:bg-gray-700 hover:rounded"
                  onClick={onClose}
                >
                  {link.name}
                </Link>
              </li>
            ))}
          </ul>
        </nav>
      </div>
    </div>
  );
};

export default Sidebar;


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\dashboard\page.tsx ===
"use client";

import React from "react";
import Card from "@/app/components/dashboard_card";

const Dashboard: React.FC = () => {
  const weatherReport = {
    forecast: [
      { time: "now", weather: "Rain", percentage: "20%" },
      { time: "2pm", weather: "Sunny", percentage: null },
      { time: "3pm", weather: "Raining", percentage: "50%" },
      { time: "4pm", weather: "Cloudy", percentage: "10%" },
      { time: "5pm", weather: "Clear", percentage: null },
      { time: "6pm", weather: "Partly Cloudy", percentage: "30%" },
      { time: "7pm", weather: "Raining", percentage: "60%" },
    ],
    details: {
      low: "40",
      high: "70",
      sunUp: "7:00",
      sunDown: "21:00",
    },
  };

  return (
    <div className="bg-gray-100 h-[100vh] relative p-6">
      <h1 className="text-2xl font-bold mb-4">Dashboard</h1>

      <Card
        key={1}
        title={"Today's Overview"}
        size={"w-[500px]"}
        top={"200px"}
        left={"0px"}
      >
        <div className="flex">
          <div className="flex basis-1/2 border-r text-center p-2 space-x-2 border-gray-200">
            <div className="flex justify-center items-center text-7xl">↓</div>
            <div className="flex flex-col text-left">
              {weatherReport.forecast.map((weather, index) => (
                <div key={index} className="">
                  {weather.time} - {weather.percentage} {weather.weather}
                </div>
              ))}
            </div>
          </div>

          <div className="flex flex-col justify-center items-center basis-1/2 text-center p-6 space-y-6">
            <div className="flex flex-col items-center space-y-2">
              <div className="text-3xl font-bold flex space-x-12">
                <span>{weatherReport.details.low}°F</span>
                <span>{weatherReport.details.high}°F</span>
              </div>
              <div className="flex justify-between w-full text-gray-500 text-sm uppercase tracking-wide">
                <span className="text-blue-600">Low</span>
                <span className="text-red-600">High</span>
              </div>
            </div>

            <div className="w-2/3 border-t border-gray-300"></div>

            <div className="flex flex-col items-center space-y-2">
              <div className="text-3xl font-semibold flex space-x-12">
                <span className="">{weatherReport.details.sunUp}</span>
                <span className="">{weatherReport.details.sunDown}</span>
              </div>
              <div className="flex justify-between w-full text-gray-500 text-sm uppercase tracking-wide">
                <span className="text-yellow-500">Sunrise</span>
                <span className="text-orange-500">Sunset</span>
              </div>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default Dashboard;


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\decks\elements\[rowIndex]\edit\page.tsx ===
"use client";

import React, { useState } from "react";
import { useRouter, useParams } from "next/navigation";

import decksData from "@/data/decks.json";
import ElementRow from "@/app/components/elementRow";

const ElementDetail = () => {
  const { rowIndex } = useParams();
  const index = Number(rowIndex) - 1;

  const [deckName, setDeckName] = useState(decksData.data[index].deckName);
  const [elements, setElements] = useState(decksData.data[index].elements);
  const [isSaving, setIsSaving] = useState(false);

  const operatorOptions = ["<", "<=", "=", ">=", ">"];
  const weatherOptions = [
    { weather: "Wind speed", unit: "mph" },
    { weather: "Temperature", unit: "°F" },
    { weather: "Humidity", unit: "%" },
    { weather: "Visibility", unit: "miles" },
    { weather: "Pressure", unit: "hPa" },
    { weather: "Precipitation", unit: "in" },
    { weather: "Cloud cover", unit: "%" },
  ];

  const router = useRouter();

  const updateElement = (
    i: number,
    key: "title" | "operator" | "value",
    newValue: string
  ) => {
    setElements((prev) =>
      prev.map((el, idx) => {
        if (idx !== i) return el;

        const updatedEl = { ...el, [key]: newValue };

        if (key === "title") {
          const match = weatherOptions.find((opt) => opt.weather === newValue);
          if (match) updatedEl.unit = match.unit;
        }

        return updatedEl;
      })
    );
  };

  const handleDeleteDeck = async () => {
    try {
      const res = await fetch("/api/deleteDeck", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ index }),
      });

      const result = await res.json();

      if (result.success) {
        router.push("/decks");
      } else {
        console.error("Failed to delete deck:", result.message);
      }
    } catch (err) {
      console.error("Error deleting deck:", err);
    }
  };

  const handleDeleteElement = (indexToDelete: number) => {
    setElements((prev) => prev.filter((_, i) => i !== indexToDelete));
  };

  const handleAddElement = () => {
    setElements((prev) => [
      ...prev,
      {
        title: "Temperature",
        operator: "<",
        value: 0,
        arrowUp: false,
        unit: "°F",
      },
    ]);
  };

  const handleSaveDeck = async () => {
    setIsSaving(true);
    try {
      const res = await fetch("/api/updateDeck", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          index,
          deckName,
          elements,
        }),
      });

      const result = await res.json();

      if (result.success) {
        console.log("Deck saved successfully!");
      } else {
        console.error("Failed to save deck.");
      }
    } catch (err) {
      console.error("Error saving deck:", err);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="md:p-4">
      {/* Back + delete */}
      <div className="flex justify-between items-center mb-4 gap-4">
        <button
          type="button"
          className="bg-gray-500 w-1/20 min-w-[120px] text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition duration-200"
          onClick={() => router.back()}
        >
          Back
        </button>
        <button
          type="button"
          className="bg-red-500 w-1/20 min-w-[120px] text-white px-4 py-2 rounded-lg hover:bg-red-700 transition duration-200 disabled:bg-red-300"
          onClick={handleDeleteDeck}
        >
          Delete
        </button>
      </div>

      {/* Element rows */}
      <div className="border border-gray-200 w-full dark:border-gray-700 rounded-lg p-2 md:p-4 space-y-4">
        <h1 className="text-2xl font-semibold w-max-4">
          <input
            type="text"
            value={deckName}
            className="border p-2 w-full rounded-lg dark:bg-gray-800 dark:text-white"
            onChange={(e) => setDeckName(e.target.value)}
          />
        </h1>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-center">
          {elements.map((element, i) => (
            <ElementRow
              key={`element-${i}`}
              element={element}
              index={i}
              weatherOptions={weatherOptions}
              operatorOptions={operatorOptions}
              updateElement={updateElement}
              handleDeleteElement={handleDeleteElement}
            />
          ))}
        </div>
      </div>

      {/* Add More Button */}
      <div className="mt-4">
        <button
          type="button"
          className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition duration-200"
          onClick={handleAddElement}
        >
          Add More
        </button>
      </div>

      {/* Save button */}
      <div className="w-full flex items-end justify-end mt-4">
        <button
          className="bg-blue-500 w-28 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition duration-200 disabled:bg-blue-300"
          onClick={handleSaveDeck}
          disabled={isSaving}
        >
          {isSaving ? (
            <div className="flex items-center justify-center gap-2">
              <svg
                className="animate-spin h-5 w-5 text-white"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                  fill="none"
                />
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8v8z"
                />
              </svg>
              Saving...
            </div>
          ) : (
            "Save"
          )}
        </button>
      </div>
    </div>
  );
};

export default ElementDetail;


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\decks\elements\[rowIndex]\page.tsx ===
"use client";

import React from "react";
import { useParams } from "next/navigation";
import { useNavLink } from "@/utils/navigation";
import decksData from "@/data/decks.json";

const Home: React.FC = () => {
  const { rowIndex } = useParams();
  const index = Number(rowIndex) - 1;
  const deck = decksData.data[index];
  const navLink = useNavLink();

  const handleEdit = () => {
    navLink({ path: `/decks/elements/${rowIndex}/edit` });
  };

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* Main Content */}
      <main className="flex-1 p-6">
        <div className="flex flex-wrap justify-between items-center mb-8">
          <h1 className="text-3xl font-bold">{deck.deckName}</h1>
          <button
            className="bg-blue-600 text-white font-semibold rounded-md px-5 py-2 hover:bg-blue-700 transition"
            onClick={handleEdit}
          >
            Edit Deck
          </button>
        </div>

        {/* Dashboard Cards */}
        <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {deck.elements.map((element, i) => (
            <div
              key={i}
              className="bg-white rounded-xl p-5 shadow hover:shadow-lg transition border border-gray-200"
            >
              <h2 className="text-sm uppercase text-gray-500 mb-2">
                {element.title}
              </h2>
              <div className="flex items-center space-x-2">
                <p className="text-3xl font-bold">
                  {element.operator === "-" ? "-" : ""}
                  {element.value}
                  <span className="text-base text-gray-400 ml-1">
                    {element.unit}
                  </span>
                </p>
                {element.arrowUp && (
                  <span
                    className={`text-sm font-medium ${
                      element.arrowUp === true
                        ? "text-green-500"
                        : "text-red-500"
                    }`}
                  >
                    {element.arrowUp}
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
      </main>
    </div>
  );
};

export default Home;


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\decks\page.tsx ===
"use client";

import { useNavLink } from "@/utils/navigation";
import React from "react";
import dataDecks from "@/data/decks.json";

const Page = () => {
  const navLink = useNavLink();

  const handleViewDeck = (id: string) => {
    navLink({ path: `/decks/elements/${id}` });
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold text-gray-800 mb-8">Your Decks</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {dataDecks.data.map((deck, index) => (
          <div
            key={index}
            className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 "
          >
            <div className="p-6 h-full flex flex-col justify-between">
              <div>
                <h2 className="text-xl font-bold text-gray-800 mb-3">
                  {deck.deckName}
                </h2>
                <div className="space-y-3">
                  {deck.elements.slice(0, 4).map((element, i) => (
                    <div
                      key={i}
                      className="flex justify-between items-center py-2 px-3 bg-gray-50 rounded-lg"
                    >
                      <span className="text-gray-600 font-medium">
                        {element.title}
                      </span>
                      <span className="text-gray-800 font-semibold">
                        {element.value}{" "}
                        {element.unit && (
                          <span className="text-gray-500">{element.unit}</span>
                        )}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
              <button
                className="mt-4 w-full py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200"
                onClick={() => handleViewDeck((index + 1).toString())}
              >
                View Deck
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Page;


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\error.tsx ===
"use client";

import { useEffect } from "react";

export default function Error({
  error,
  reset,
}: {
  error: Error;
  reset: () => void;
}) {
  useEffect(() => {
    console.error("Error in main page:", error);
  }, [error]);

  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-red-50 text-center p-4">
      <h2 className="text-2xl font-bold text-red-600">Something went wrong</h2>
      <p className="text-gray-700 mt-2">
        {error.message || "An unexpected error occurred."}
      </p>
      <button
        onClick={reset}
        className="mt-4 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition"
      >
        Try Again
      </button>
    </div>
  );
}


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\hooks\useLocalStorage.tsx ===
import { useState, useEffect } from "react";

export function useLocalStorage<T>(key: string, initialValue: T) {
  const [storedValue, setStoredValue] = useState<T | undefined>(undefined);
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);

    const saved = localStorage.getItem(key);

    if (saved) {
      try {
        setStoredValue(JSON.parse(saved));
      } catch (error) {
        console.error("Error parsing JSON from localStorage:", error);
        setStoredValue(initialValue);
      }
    } else {
      setStoredValue(initialValue);
    }
  }, []);

  useEffect(() => {
    if (isClient && storedValue !== undefined) {
      try {
        localStorage.setItem(key, JSON.stringify(storedValue));
      } catch (error) {
        console.error("Error saving data to localStorage:", error);
      }
    }
  }, [key, storedValue, isClient]);

  return [storedValue, setStoredValue] as const;
}


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\layout.tsx ===
"use client";

import { useState } from "react";
import Header from "@/app/components/header";
import Sidebar from "@/app/components/sidebar";
import "@/app/globals.css";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  return (
    <html lang="en">
      <body className="min-h-screen overflow-x-hidden">
        {/* Sidebar - Ensure it's properly positioned */}
        <Sidebar
          isOpen={isSidebarOpen}
          onClose={() => setIsSidebarOpen(false)}
        />

        <div className="flex flex-col flex-1">
          {/* Header */}
          <Header onSidebarToggle={() => setIsSidebarOpen(!isSidebarOpen)} />

          {/* Main Content */}
          <main className="mt-[72px] md:ml-[132px] md:p-4 bg-gray-100">
            {children}
          </main>
        </div>
      </body>
    </html>
  );
}


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\loading.tsx ===
export default function Loading() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-100">
      <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500"></div>
    </div>
  );
}


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\page.tsx ===
"use client";
import React, { useState } from "react";

const Home = () => {
  // State for form fields
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  // State for feedback message
  const [message, setMessage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setMessage(null); // Reset message before making the request

    try {
      // Call the Next.js API route to add the user
      const response = await fetch("/api/add-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ username: name, email, password }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        setMessage("User successfully added to the database!");
      } else {
        setMessage(data.message || "Failed to add user. Please try again.");
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
    } catch (error) {
      setMessage("Error adding user. Please try again.");
    } finally {
      setIsLoading(false);
    }

    // Reset form fields
    setName("");
    setEmail("");
    setPassword("");
  };

  return (
    <div className="p-4">
      <h1 className="text-2xl font-semibold mb-4 flex justify-center">Home</h1>

      <form onSubmit={handleSubmit} className="space-y-4 max-w-sm mx-auto">
        {/* Name Field */}
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700"
          >
            Name
          </label>
          <input
            id="name"
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
            required
          />
        </div>

        {/* Email Field */}
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700"
          >
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
            required
          />
        </div>

        {/* Password Field */}
        <div>
          <label
            htmlFor="password"
            className="block text-sm font-medium text-gray-700"
          >
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
            required
          />
        </div>

        {/* Submit Button */}
        <div className="flex justify-center">
          <button
            type="submit"
            className="w-full px-4 py-2 bg-blue-500 text-white font-semibold rounded-md shadow-sm hover:bg-blue-600"
            disabled={isLoading}
          >
            {isLoading ? "Adding User..." : "Add User"}
          </button>
        </div>
      </form>

      {/* Feedback Message */}
      {message && (
        <div
          className={`mt-4 p-4 text-center rounded-md ${
            message.includes("successfully")
              ? "bg-green-200 text-green-700"
              : "bg-red-200 text-red-700"
          }`}
        >
          {message}
        </div>
      )}
    </div>
  );
};

export default Home;


// === Contents of c:\Users\zachm\Desktop\VSCode\Python\SkyDeck\weather-frontend\skydeck\src\app\profile\page.tsx ===
import React from "react";

const Dashboard = () => {
  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900 p-6">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-center md:text-left text-gray-900 dark:text-white mb-6">
          Profile
        </h1>
      </div>
    </div>
  );
};

export default Dashboard;
